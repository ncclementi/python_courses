* Dictionaries are also a type of Collections.

* Dictionaries are mutable.

* Difference between dictionaries and lists.
    
    - List: a linear collection of values that stay in order.

    - Dictionary: A "bag" of values, each with its own label (key).


* Dictionaries don't maintain order, we index the things we put in the dictionary
  with a "lookup tag". Example:

    >>> purse = dict()          # we can also do purse = {}
    >>> purse['money'] = 12 
    >>> purse['candy'] = 3
    >>> purse['tissues'] = 75
    >>> print purse
    {'money': 12, 'candy': 3, 'tissues': 75}
    >>> print purse['candy']
    3
    >>> purse['candy'] = purse['candy'] + 2
    >>> print purse
    {'money': 12, 'candy': 5, 'tissues': 75}

* Dictionaries are good for counting how often do we "see" something.

    >>> ccc = dict
    >>> ccc['csev'] = 1
    >>> ccc['cwen'] = 1
    >>> print ccc
    {'csev': 1, 'cwen': 1}
    >>> ccc['cwen'] = ccc['cwen'] + 1
    >>> print ccc
    {'csev': 1, 'cwen': 2}


    Example 1:

        counts = dict()
        names  = ['a', 'b', 'a', 'c', 'b']
        for name in names:
            if name not in counts:
                counts[name] = 1
            else:
                counts[name] = counts[name] +1
        print counts
        
        {'a': 2, 'c': 1, 'b': 2} 


* We can use the operator 'in' to check if a key is in a dictionary.

    >>> 'key' in ccc
    False


* get() method : to know if a key is in the dictionary.

    counts.get(name, 0)
        
    Note: first arg is the Key, second is a value that will return in case 
          the key is not in the dictionary. 
          If the key is in the dictionary, it returns its value.  


    Rewriting Example 1 using get():

    counts = dict()
        names  = ['a', 'b', 'a', 'c', 'b']
        for name in names:
            counts[name] = counts.get(name,0) +1
        print counts
        
        {'a': 2, 'c': 1, 'b': 2} 


* Counting a pattern 

    counts = dict()
    print 'Enter a lin of text'
    line = raw_input('')

    words = line.split()
    print 'Words:', words

    print 'Counting...'
    for word in words:
        counts[word] = count.get(word,0) + 1
    
    print 'Counts', counts 

* We can loop over dictionaries.

* Retrieving lists of keys and values.

        >>> jjj = {'chuck': 1, 'fred': 42, 'jan': 100}
        >>> print jjj.list()
        ['jan', 'chuck', 'fred']  # note it just gives me the keys
        
        >>> print jjj.keys()
        ['jan', 'chuck', 'fred'] 
                                    # If we don't change the dict in between
                                    # the keys and values correspond each other
                                    # in order.    
        >>> print jjj.values()
        [100, 1, 42]

        # We can get a list with pairs (key, value) what are tuples, next 
        # chapter, by doing

        >>> print jjj.items()
        [('jan', 100), ('chuck', 1), ('fred', 42)]


* Two iteration variables:

    - We can loop through the key-value pair in a dictionary using "two"
      iteration variables. 

    - Each iteration the 1st variable is the key and the 2nd the corresponding 
      value.

    Example:

        >>> jjj = {'chuck': 1, 'fred': 42, 'jan': 100}
        >>> for aaa,bbb in jjj.items():
                print aaa,bbb

        jan 100
        chuck 1
        fred 42


* When we want to know which word is the most repeated. 

    If the text is short we will read it all at once using read. Example:

    
    name   = raw_input("Enter a file:")
    handle = open(name, 'r')
    text   = handle.read()
    words  = text.split()

    counts = dict()
    for word in words:
        counts[word] = count.get(word,0) + 1

    bigcount = None
    bigword  = None
    
    for word, count in counts.items():
        if bigcount is None or count > bigcount:
            bigword = word
            bigcount = count

    print bigword, bigcount



































         





















